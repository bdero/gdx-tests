package com.cheesekeg.drop;

import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.audio.Music;
import com.badlogic.gdx.audio.Sound;
import com.badlogic.gdx.graphics.GL10;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.Texture.TextureFilter;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.utils.Array;

public class Drop implements ApplicationListener {
	Texture dropImage;
	Texture bucketImage;
	Sound dropSound;
	Music rainMusic;
	
	OrthographicCamera camera;
	SpriteBatch batch;
	
	Rectangle bucket;
	Array<Rectangle> raindrops;
	long lastDropTime;
	
	Vector3 touchPos;
	
	@Override
	public void create() {
		// Load assets
		dropImage = new Texture(Gdx.files.internal("droplet.png"));
		bucketImage = new Texture(Gdx.files.internal("bucket.png"));
		dropSound = Gdx.audio.newSound(Gdx.files.internal("drop.wav"));
		rainMusic = Gdx.audio.newMusic(Gdx.files.internal("rain.mp3"));
		
		// Start looping music
		rainMusic.setLooping(true);
		rainMusic.play();
		
		// Set up the camera
		camera = new OrthographicCamera();
		camera.setToOrtho(false, 800, 480);
		
		// Initialize the sprite batch
		batch = new SpriteBatch();
		
		// Set up the player's bucket
		bucket = new Rectangle();
		bucket.x = camera.viewportWidth/2 - bucketImage.getWidth()/2;
		bucket.y = 20;
		bucket.width = bucketImage.getWidth();
		bucket.height = bucketImage.getHeight();
	}

	@Override
	public void dispose() {
	}

	private void spawnRaindrop() {
		Rectangle raindrop = new Rectangle();
		raindrop.x = MathUtils.
	}

	@Override
	public void render() {
		// Fill the background
		Gdx.gl.glClearColor(0, 0, 0.2f, 1);
		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
		
		// Update the camera matrix
		camera.update();
		
		// Update the bucket position
		// Touch/click
		if (Gdx.input.isTouched()) {
			touchPos = new Vector3();
			touchPos.set(Gdx.input.getX(), Gdx.input.getY(), 0);
			camera.unproject(touchPos);
			bucket.x = touchPos.x - bucket.width/2;
		}
		// Keyboard
		if (Gdx.input.isKeyPressed(Keys.LEFT)) bucket.x -= 200*Gdx.graphics.getDeltaTime();
		if (Gdx.input.isKeyPressed(Keys.RIGHT)) bucket.x += 200*Gdx.graphics.getDeltaTime();
		
		// Keep the bucket in bounds
		bucket.x = MathUtils.clamp(bucket.x, 0, camera.viewportWidth - bucket.width);
		
		
		// Draw everything
		batch.setProjectionMatrix(camera.combined);
		batch.begin();
		batch.draw(bucketImage, bucket.x, bucket.y);
		batch.end();
	}

	@Override
	public void resize(int width, int height) {
	}

	@Override
	public void pause() {
	}

	@Override
	public void resume() {
	}
}
